# Copyright (c) 2025 Maxim [maxirmx] Samsonov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# This file is a part of tip5xx library

name: build-and-test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
    group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
    cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.env.os }}-${{ matrix.env.compiler.name }}  [ coverage ${{ matrix.env.coverage }} asan ${{ matrix.env.asan }} ]
    runs-on: ${{ matrix.env.os }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - { os: ubuntu-latest, compiler: {name: "gcc", cc: "gcc", cxx: "g++"}, coverage: false, asan: false }
          - { os: macos-latest, compiler: {name: "clang", cc: "clang", cxx: "clang++"}, coverage: false, asan: false }
          - { os: windows-latest, compiler: {name: "clang", cc: "clang-cl", cxx: "clang-cl"}, coverage: false, asan: false }
          - { os: ubuntu-latest, compiler: {name: "gcc", cc: "gcc", cxx: "g++"}, coverage: true, asan: false }
          - { os: ubuntu-latest, compiler: {name: "clang", cc: "clang", cxx: "clang++"}, coverage: false, asan: true }

    steps:
    - name: Checkout
      uses: actions/checkout@v4

#    - name: Install Clang (Windows)
#      if: runner.os == 'Windows'
#      uses: egor-tensin/setup-clang@v1
#      with:
#        version: latest
#        platform: x64

    - name: Configure CMake
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake -B build \
          -G "Visual Studio 17 2022" \
          -A x64 \
          -T ClangCL \
          -DCMAKE_BUILD_TYPE=${{ matrix.env.coverage && 'Debug' || 'Release' }} \
          -DCMAKE_C_COMPILER=${{ matrix.env.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.env.compiler.cxx }} \
          -DBUILD_TESTING=ON \
          -DENABLE_COVERAGE=${{ matrix.env.coverage }} \
          -DENABLE_SANITIZER=${{ matrix.env.asan }}
        else
          cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.env.coverage && 'Debug' || 'Release' }} \
          -DCMAKE_C_COMPILER=${{ matrix.env.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.env.compiler.cxx }} \
          -DBUILD_TESTING=ON \
          -DENABLE_COVERAGE=${{ matrix.env.coverage }} \
          -DENABLE_SANITIZER=${{ matrix.env.asan }}
        fi

    - name: Build
      run: cmake --build build --config ${{ matrix.env.coverage && 'Debug' || 'Release' }}

    - name: Test
      working-directory: build
      run: ctest -C ${{ matrix.env.coverage && 'Debug' || 'Release' }} --output-on-failure

    - name: Set build paths
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "CONFIG=${{ matrix.env.coverage && 'Debug/' || 'Release/' }}" >> $GITHUB_ENV
          echo "EXE=.exe" >> $GITHUB_ENV
        else
          echo "CONFIG=" >> $GITHUB_ENV
          echo "EXE=" >> $GITHUB_ENV
        fi

    - name: Sample App Tests
      working-directory: build/samples
      shell: bash
      run: |
        # Test pair mode with different formats
        ./${CONFIG}tip5xx_sample${EXE} 0x1EADB75F 0xC7FEBAB9  # hexadecimal
        ./${CONFIG}tip5xx_sample${EXE} 16909060 84281096  # decimal
        ./${CONFIG}tip5xx_sample${EXE} 0100402404 0502060710  # octal

        # Test varlen mode with mixed formats
        ./${CONFIG}tip5xx_sample${EXE} -m varlen 0x1EADB75F 16909060 0502060710

        # Test help
        ./${CONFIG}tip5xx_sample${EXE} --help

    - name: Generate coverage report
      if: matrix.env.coverage
      working-directory: ${{github.workspace}}/build
      run: |
        gcov $(find . -name "*.gcno")

    - name: Upload to Codecov
      if: matrix.env.coverage
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        verbose: true
        files: |
          ${{github.workspace}}/build/CMakeFiles/tip5xx.dir/src/*.gc*
          ${{github.workspace}}/build/samples/CMakeFiles/tip5xx_sample.dir/src/*.gc*
          ${{github.workspace}}/lib/include/tip5xx/*.hpp
        directory: ${{github.workspace}}/build
